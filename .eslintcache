[{"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js":"1","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js":"2","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js":"3","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js":"4","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js":"5","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js":"6","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js":"7","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Header.js":"8","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\AppDrawer.js":"9","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Appbar.js":"10","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\index.js":"11","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchData.js":"12","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\index.js":"13","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\SingleArtist.js":"14","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\SingleAlbum.js":"15","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\index.js":"16","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\SingleSong.js":"17","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorites\\index.js":"18","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorites\\FavoriteList.js":"19","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorites\\FavoriteData.js":"20"},{"size":826,"mtime":1610350962741,"results":"21","hashOfConfig":"22"},{"size":1720,"mtime":1610352389196,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1610350962742,"results":"24","hashOfConfig":"22"},{"size":1304,"mtime":1610350962737,"results":"25","hashOfConfig":"22"},{"size":464,"mtime":1610350962733,"results":"26","hashOfConfig":"22"},{"size":3038,"mtime":1610350962734,"results":"27","hashOfConfig":"22"},{"size":3664,"mtime":1610350962737,"results":"28","hashOfConfig":"22"},{"size":997,"mtime":1610365935005,"results":"29","hashOfConfig":"22"},{"size":4743,"mtime":1610350962732,"results":"30","hashOfConfig":"22"},{"size":1325,"mtime":1610350962732,"results":"31","hashOfConfig":"22"},{"size":640,"mtime":1610350962739,"results":"32","hashOfConfig":"22"},{"size":4602,"mtime":1610350962738,"results":"33","hashOfConfig":"22"},{"size":2407,"mtime":1610350962731,"results":"34","hashOfConfig":"22"},{"size":9047,"mtime":1610366103860,"results":"35","hashOfConfig":"22"},{"size":6357,"mtime":1610350962730,"results":"36","hashOfConfig":"22"},{"size":2401,"mtime":1610350962741,"results":"37","hashOfConfig":"22"},{"size":6707,"mtime":1610350962740,"results":"38","hashOfConfig":"22"},{"size":905,"mtime":1610373492685,"results":"39","hashOfConfig":"22"},{"size":4840,"mtime":1610350962735,"results":"40","hashOfConfig":"22"},{"size":1537,"mtime":1610373706051,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"d00893",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js",[],["87","88"],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js",["89","90","91"],"import React, {useState, useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { gql, useQuery, useMutation } from '@apollo/client';\r\nimport SingleArtist from './SingleArtist';\r\n\r\n\r\nexport default function Artist() {\r\n    const [results, setResults] = useState([]);\r\n    const [selected, setSelected] = useState('');\r\n    const {slug} = useParams();\r\n    const { error, data } = useQuery(\r\n            GET_SINGLE_ARTIST, {\r\n            variables: {slug: slug}\r\n            }\r\n        );\r\n    const [addArtist, {addData, loading}] = useMutation(GET_CHOOSEN_DATA);\r\n    const [addPublish, {newData}] = useMutation(PUBLISH_LIST);\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const getData = () => {\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data) {\r\n            //console.log(data);\r\n            return setResults(data); \r\n        }\r\n    }\r\n\r\n    const handleSelected =(e, key) => {\r\n        e.preventDefault();\r\n        //console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        //console.log(tempSelect);\r\n        addArtist({variables: {favoriteId : tempSelect}}) \r\n        addPublish({variables: {favoriteId: e.target.value}})\r\n        setSelected(tempSelect);    \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {results.length === 0 ? \r\n                <h1>Loading Artist...</h1> \r\n              :  <SingleArtist \r\n                    results = {results} \r\n                    selected = {selected}\r\n                    handleSelected = {handleSelected}\r\n                    />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n    \r\nconst GET_SINGLE_ARTIST = gql` \r\n    query SingleArtist($slug: String!) { \r\n        artist(where: {slug: $slug}){ \r\n            id\r\n            name\r\n            slug\r\n            artistImage {\r\n                url\r\n            }\r\n            albums {\r\n                ...on Album {\r\n                    id\r\n                    slug\r\n                    albumName\r\n                    albumImage {\r\n                        url\r\n                    }\r\n                    songs {\r\n                        id\r\n                        slug\r\n                        songTitle\r\n                        songFile {\r\n                            url\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            songs {\r\n                ...on Song {\r\n                    id\r\n                    slug\r\n                    songTitle\r\n                    songFile {\r\n                        url\r\n                    }\r\n                }\r\n            }\r\n        }   \r\n    } \r\n`; \r\n\r\nconst GET_CHOOSEN_DATA =  gql`\r\n    mutation MyMutation($favoriteId: String!) {\r\n        createFavoriteList(data: {favoriteId: $favoriteId}) {\r\n            favoriteId\r\n      }\r\n  }\r\n`;\r\n\r\nconst PUBLISH_LIST = gql`\r\n    mutation MyLoading($favoriteId : String!) {\r\n        publishFavoriteList(where: {favoriteId: $favoriteId}, to: PUBLISHED){\r\n            favoriteId\r\n          }\r\n  }\r\n`;","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Header.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\AppDrawer.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Appbar.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchData.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\index.js",["92","93"],"import React, {useState, useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { gql, useQuery, useMutation } from '@apollo/client';\r\nimport SingleAlbum from './SingleAlbum';\r\n\r\n\r\n  \r\nexport default function Album() {\r\n    const [results, setResults] = useState([]);\r\n    const [selected, setSelected] = useState([]);\r\n    const {slug} = useParams();\r\n    const { loading, error, data} = useQuery(\r\n        GET_SINGLE_ALBUM, {\r\n            variables: {slug: slug}\r\n        }\r\n    );\r\n\r\n    const [addArtist, {addData}] = useMutation(GET_CHOOSEN_DATA);\r\n    const [addPublish, {newData}] = useMutation(PUBLISH_LIST);\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const getData = () => {\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data) {\r\n            return setResults(data);\r\n          \r\n        }\r\n    }\r\n\r\n    const handleSelected =(e, key) => {\r\n        //console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        //console.log( typeof tempSelect);\r\n        addArtist({variables: {favoriteId : tempSelect}}) \r\n        addPublish({variables: {favoriteId: e.target.value}})\r\n        setSelected(tempSelect);\r\n    }\r\n\r\n    //console.log(results);\r\n\r\n    return (\r\n        <div>\r\n            {loading || results.length === 0 ? \r\n                <h1>Loading Album...</h1> \r\n              :  <SingleAlbum \r\n                results = {results} \r\n                selected = {selected}\r\n                handleSelected = {handleSelected}/>\r\n            }\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\nconst GET_SINGLE_ALBUM = gql`\r\nquery SingleAlbum($slug: String!) {\r\n    album(where: {slug: $slug}) {\r\n        id\r\n        slug\r\n        albumName\r\n        albumImage {\r\n          url\r\n        }\r\n        songs {\r\n            ...on Song {\r\n                id\r\n                slug\r\n                songTitle\r\n                songFile {\r\n                  url\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst GET_CHOOSEN_DATA =  gql`\r\n    mutation MyMutation($favoriteId: String!) {\r\n        createFavoriteList(data: {favoriteId: $favoriteId}) {\r\n            favoriteId\r\n      }\r\n  }\r\n`;\r\n\r\nconst PUBLISH_LIST = gql`\r\n    mutation MyLoading($favoriteId : String!) {\r\n        publishFavoriteList(where: {favoriteId: $favoriteId}, to: PUBLISHED){\r\n            favoriteId\r\n          }\r\n  }\r\n`;","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\SingleArtist.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\SingleAlbum.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\index.js",["94","95"],"import React, {useState, useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { gql, useQuery, useMutation } from '@apollo/client';\r\nimport SingleSong from './SingleSong';\r\n\r\n\r\nexport default function Song() {\r\n    const [results, setResults] = useState([]);\r\n    const [selected, setSelected] = useState([]);\r\n    const {slug} = useParams();\r\n    const { loading, error, data} = useQuery(\r\n        GET_SINGLE_SONG, {\r\n            variables: {slug: slug}\r\n        }\r\n    );\r\n\r\n    const [addArtist, {addData}] = useMutation(GET_CHOOSEN_DATA);\r\n    const [addPublish, {newData}] = useMutation(PUBLISH_LIST);\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const getData = () => {\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data) {\r\n            return setResults(data);\r\n          \r\n        }\r\n    }\r\n\r\n    const handleSelected =(e, key) => {\r\n        //console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        //console.log( typeof tempSelect);\r\n        addArtist({variables: {favoriteId : tempSelect}}) \r\n        addPublish({variables: {favoriteId: e.target.value}})\r\n        setSelected(tempSelect);\r\n    }\r\n    //console.log(results);\r\n    \r\n    return (\r\n        <div>\r\n            {loading || results.length === 0 ? \r\n                <h1>Loading Song...</h1> \r\n              :  <SingleSong \r\n                results = {results} \r\n                selected = {selected}\r\n                handleSelected = {handleSelected}/>\r\n            }\r\n        </div>\r\n       \r\n    )\r\n}\r\n    \r\n\r\n\r\nconst GET_SINGLE_SONG = gql`\r\nquery GetSong($slug: String!) {\r\n    song(where: {slug: $slug}) {\r\n        id\r\n        slug\r\n        songTitle\r\n        songFile {\r\n          url\r\n        }\r\n        artists {\r\n            ...on Artist {\r\n                id\r\n                slug\r\n                name\r\n                artistImage {\r\n                    url\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst GET_CHOOSEN_DATA =  gql`\r\n    mutation MyMutation($favoriteId: String!) {\r\n        createFavoriteList(data: {favoriteId: $favoriteId}) {\r\n            favoriteId\r\n      }\r\n  }\r\n`;\r\n\r\nconst PUBLISH_LIST = gql`\r\n    mutation MyLoading($favoriteId : String!) {\r\n        publishFavoriteList(where: {favoriteId: $favoriteId}, to: PUBLISHED){\r\n            favoriteId\r\n          }\r\n  }\r\n`;","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\SingleSong.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorites\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorites\\FavoriteList.js",["96","97"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, List, ListItem, ListItemAvatar, Avatar, \r\n        ListItemText, } from '@material-ui/core';\r\nimport logo from '../../Image/logo.jpg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        paddingLeft: \"90px\",\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar\r\n    },\r\n    grid: {\r\n        padding: '75px',\r\n        marginLeft: '200px',\r\n        marginRight: '200px'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        paddingTop: '0px',\r\n        paddingBottom: '25px',\r\n        boxShadow: \"0px 1px 6px 0px rgba(0,0,0,0.7)\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            boxShadow: \"none\",\r\n        },\r\n    },\r\n    list : {\r\n        marginTop: '25px', \r\n        marginBottom: '25px', \r\n        paddingLeft: '40px', \r\n        paddingRight: '40px', \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n    },\r\n    listItemHeader: {\r\n        background: \"rgb(230, 230, 230)\",\r\n        color: \"rgb(128, 128, 128)\",\r\n        padding: \"8px 12px\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            paddingLeft: \"340px\",\r\n        },\r\n    },\r\n    listItemHeaderText: {\r\n        transition: \"all 0.3s linear\",\r\n        maxWidth: \"40ch\",\r\n        textAlign: 'center',  \r\n        color: 'black', \r\n    },\r\n    large: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n    },\r\n  }));\r\n\r\nexport default function FavoriteList({favoriteData, loading}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main >\r\n            <div className={classes.toolbar} />\r\n            <Grid container item xs={12} justify=\"center\">\r\n                <Grid container item xs={12} spacing={6} className = {classes.grid} >\r\n                    <Grid container item xs = {12}  >\r\n                        <Grid item xs = {12} lg>\r\n                            <List dense className = {classes.root}>\r\n                                \r\n                                <ListItem dense className = {classes.listItemHeader}>\r\n                                    <Avatar className = {classes.large}\r\n                                        variant=\"square\"\r\n                                        width = 'auto'\r\n                                        height = '100%'\r\n                                        alt = {logo}\r\n                                        src = {logo}\r\n                                        />\r\n                                    <ListItemText className = {classes.listItemHeaderText} \r\n                                    primary = 'Favorites'\r\n                                        /> \r\n                                </ListItem>\r\n\r\n                                {/*{favoriteData.artist.albums.length >= 1 ? favoriteData.artist.albums.map((album, id) => {\r\n                                   //console.log(album.id);\r\n                                   const labelId = `checkbox-list-secondary-label-${album.albumName}`;\r\n                                    return (\r\n                                        <List key = {id} className = {classes.list}>\r\n                                            <ListItem button component = {Link} to ={`/album/${album.slug}`} \r\n                                                className = {classes.albumTitle}>\r\n                                                <ListItemAvatar style = {{paddingLeft: '48px'}}>\r\n                                                    <Avatar \r\n                                                        variant = {album.albumImage ? 'square' : null}\r\n                                                        className = {album.albumImage ? classes.large : null}\r\n                                                        alt = {album + 1}\r\n                                                        src = {album.albumImage ? album.albumImage.url : logo}\r\n                                                    />\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText id = {labelId}\r\n                                                        className = {classes.listItemHeaderText} \r\n                                                        primary = {album.albumName}\r\n                                                />\r\n                                            </ListItem>\r\n                                     </List>\r\n                                    )\r\n                                }) : null}*/}\r\n                            </List>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </main> \r\n    )   \r\n}\r\n\r\n\r\n","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorites\\FavoriteData.js",["98","99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":16,"column":24,"nodeType":"107","messageId":"108","endLine":16,"endColumn":31},{"ruleId":"105","severity":1,"message":"109","line":16,"column":33,"nodeType":"107","messageId":"108","endLine":16,"endColumn":40},{"ruleId":"105","severity":1,"message":"110","line":17,"column":25,"nodeType":"107","messageId":"108","endLine":17,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":18,"column":24,"nodeType":"107","messageId":"108","endLine":18,"endColumn":31},{"ruleId":"105","severity":1,"message":"110","line":19,"column":25,"nodeType":"107","messageId":"108","endLine":19,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":17,"column":24,"nodeType":"107","messageId":"108","endLine":17,"endColumn":31},{"ruleId":"105","severity":1,"message":"110","line":18,"column":25,"nodeType":"107","messageId":"108","endLine":18,"endColumn":32},{"ruleId":"105","severity":1,"message":"111","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"112","line":4,"column":32,"nodeType":"107","messageId":"108","endLine":4,"endColumn":46},{"ruleId":"105","severity":1,"message":"113","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":20},{"ruleId":"105","severity":1,"message":"114","line":6,"column":12,"nodeType":"107","messageId":"108","endLine":6,"endColumn":24},{"ruleId":"105","severity":1,"message":"109","line":7,"column":13,"nodeType":"107","messageId":"108","endLine":7,"endColumn":20},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'addData' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'newData' is assigned a value but never used.","'Link' is defined but never used.","'ListItemAvatar' is defined but never used.","'FavoriteList' is defined but never used.","'favoriteData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]