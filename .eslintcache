[{"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js":"1","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js":"2","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js":"3","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js":"4","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js":"5","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js":"6","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js":"7","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Header.js":"8","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\AppDrawer.js":"9","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Appbar.js":"10","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\index.js":"11","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\Dialog.js":"12","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\index.js":"13","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchPage.js":"14","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchData.js":"15"},{"size":799,"mtime":1609789447690,"results":"16","hashOfConfig":"17"},{"size":1250,"mtime":1609939099281,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":1389,"mtime":1609937611425,"results":"20","hashOfConfig":"17"},{"size":464,"mtime":1609928810928,"results":"21","hashOfConfig":"17"},{"size":12843,"mtime":1609939318388,"results":"22","hashOfConfig":"17"},{"size":3074,"mtime":1609937339499,"results":"23","hashOfConfig":"17"},{"size":981,"mtime":1609837827115,"results":"24","hashOfConfig":"17"},{"size":4740,"mtime":1609928752122,"results":"25","hashOfConfig":"17"},{"size":1321,"mtime":1609940340853,"results":"26","hashOfConfig":"17"},{"size":1240,"mtime":1609933769805,"results":"27","hashOfConfig":"17"},{"size":373,"mtime":1609931258932,"results":"28","hashOfConfig":"17"},{"size":414,"mtime":1609965879025,"results":"29","hashOfConfig":"17"},{"size":188,"mtime":1609970132727,"results":"30","hashOfConfig":"17"},{"size":3406,"mtime":1609970053955,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"d00893",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js",[],["66","67"],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js",["68","69"],"import React, {useState} from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Checkbox, FormControlLabel, Divider} from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\nimport logo from '../../Image/logo.jpg';\r\nimport SelectedFavorit from '../Favorits';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        paddingLeft: \"90px\",\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar\r\n    },\r\n    grid: {\r\n        padding: '75px',\r\n        marginLeft: '200px',\r\n        marginRight: '200px'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        paddingTop: '0px',\r\n        paddingBottom: '25px',\r\n        boxShadow: \"0px 1px 6px 0px rgba(0,0,0,0.7)\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            boxShadow: \"none\",\r\n        },\r\n    },\r\n    listItemHeader: {\r\n        background: \"rgb(230, 230, 230)\",\r\n        color: \"rgb(128, 128, 128)\",\r\n        padding: \"8px 12px\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            paddingLeft: \"340px\",\r\n        },\r\n    },\r\n    listItemHeaderText: {\r\n        transition: \"all 0.3s linear\",\r\n        maxWidth: \"40ch\",\r\n        textAlign: 'center',  \r\n        color: 'black', \r\n    },\r\n    large: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n    },\r\n    \r\n  }));\r\n\r\n  \r\nexport default function SingleArtist() {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const {slug} = useParams();\r\n    const { loading, error, data} = useQuery(\r\n        GET_SINGLE_ARTIST, {\r\n            variables: {slug: slug}\r\n        }\r\n    );\r\n\r\n    const handleSelected =(e, key) => {\r\n        console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        console.log( typeof tempSelect);\r\n        setSelected(tempSelect);\r\n        setDialogOpen(true);\r\n        \r\n    }\r\n\r\n   /* useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const getData = () => {\r\n        */\r\n        if(loading)\r\n            return <p>Loading artist...</p>\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data !== null) {\r\n           // console.log(data.artist);\r\n           // console.log(data.artist.songs);\r\n        }\r\n    \r\n        /*const handleToggle = (e) => () => {\r\n            console.log(e.target.value);\r\n            setChecked(e.target.value);\r\n            \r\n        };*/\r\n    \r\n    return (\r\n        <main >\r\n            <div className={classes.toolbar} />\r\n            <Grid container item xs={12} justify=\"center\">\r\n                <Grid container item xs={12} spacing={6} className = {classes.grid} >\r\n                    <Grid container item xs = {12} >\r\n                        <Grid item xs = {12} lg>\r\n                            <List dense className = {classes.root}>\r\n                               <ListItem dense className = {classes.listItemHeader}>\r\n                                    <Avatar className = {classes.large}\r\n                                        variant=\"square\"\r\n                                        width = 'auto'\r\n                                        height = '100%'\r\n                                        alt = {data +1}\r\n                                        src = {data.artist.artistImage.url}\r\n                                        />\r\n                                    <ListItemText className = {classes.listItemHeaderText} \r\n                                       primary = {data.artist.name}\r\n                                        /> \r\n                                </ListItem>\r\n                               {data.artist.albums.length !== 0 ? data.artist.albums.map((album, id) => {\r\n                                   //console.log(album.id);\r\n                                   const labelId = `checkbox-list-secondary-label-${album.albumName}`;\r\n                                    return (\r\n                                        <List key = {id} style = {{marginTop: '25px', marginBottom: '25px', paddingLeft: '60px' , display: 'flex', flexDirection: 'column'}}>\r\n                                            <ListItem //button component = {Link} to ={`/artist/album/${album.slug}`} \r\n                                                className = {classes.albumTitle}>\r\n                                                <FormControlLabel\r\n                                                    control = {\r\n                                                        <Checkbox icon = {<FavoriteBorder />}\r\n                                                            checkedIcon = {<Favorite />}\r\n                                                            name = 'checked'/>}\r\n                                                            edge = 'start'\r\n                                                            value = {album.id}\r\n                                                            onChange = {handleSelected}\r\n                                                            //checked = {checked.indexOf(album) !== -1}\r\n                                                            />\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar \r\n                                                        variant = {album.albumImage ? 'square' : null}\r\n                                                        className = {album.albumImage ? classes.large : null}\r\n                                                        alt = {album + 1}\r\n                                                        src = {album.albumImage ? album.albumImage.url : logo}\r\n                                                    />\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText id = {labelId}\r\n                                                        className = {classes.listItemHeaderText} \r\n                                                        primary = {album.albumName}\r\n                                                />\r\n                                            </ListItem>\r\n                                           \r\n                                            {album.songs.map ((song, id) => {\r\n                                                    //console.log(song);\r\n                                                    return(\r\n                                                        <ListItem key = {id}>\r\n                                                            <FormControlLabel \r\n                                                                control = {\r\n                                                                <Checkbox icon = {<FavoriteBorder />}\r\n                                                                    checkedIcon = {<Favorite />}\r\n                                                                    name = 'checked'/>}\r\n                                                                    edge = 'start'\r\n                                                                    value = {song.id}\r\n                                                                    onChange = {handleSelected}\r\n                                                                    //onChange = {handleToggle(song)}\r\n                                                                    //checked = {checked.indexOf(song) !== -1}\r\n                                                                    />\r\n                                                            <ListItemAvatar>\r\n                                                                <Avatar \r\n                                                                    alt = {song + 1}\r\n                                                                    src = {logo}\r\n                                                                />\r\n                                                            </ListItemAvatar>\r\n                                                            <ListItemText className = {classes.listItemHeaderText} \r\n                                                                    primary = {song.songTitle}\r\n                                                            />\r\n                                                            {song.songFile ? \r\n                                                                <audio controls>\r\n                                                                <source src = {song.songFile.url}\r\n                                                                        type = 'audio/mpeg' />\r\n                                                                </audio> : null }\r\n                                                        </ListItem>\r\n                                                    )\r\n                                                })} \r\n                                     </List>\r\n                                    )\r\n                                }) : \r\n                                data.artist.songs.map((song, id) => {\r\n                                    console.log(data.artist.songs);\r\n                                    const labelId = `checkbox-list-secondary-label-${song.songTitle}`;\r\n                                    return(\r\n                                        <ListItem key = {id}>\r\n                                            <FormControlLabel \r\n                                                control = {\r\n                                                <Checkbox icon = {<FavoriteBorder />}\r\n                                                    checkedIcon = {<Favorite />}\r\n                                                    name = 'checked'/>}\r\n                                                    edge = 'start'\r\n                                                    value = {song.id}\r\n                                                    onChange = {handleSelected}\r\n                                                    //onChange = {handleToggle(song)}\r\n                                                    //checked = {checked.indexOf(song) !== -1}\r\n                                                    />\r\n                                            <ListItemAvatar>\r\n                                                <Avatar \r\n                                                    alt = {song + 1}\r\n                                                    src = {logo}\r\n                                                />\r\n                                            </ListItemAvatar>\r\n                                            <ListItemText id = {labelId} className = {classes.listItemHeaderText} \r\n                                                    primary = {song.songTitle}\r\n                                            />\r\n                                            {song.songFile ? \r\n                                                <audio controls>\r\n                                                <source src = {song.songFile.url}\r\n                                                        type = 'audio/mpeg' />\r\n                                                </audio> : null }\r\n                                        </ListItem>\r\n                                    )\r\n                                })\r\n                            }\r\n                            </List>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {dialogOpen && <SelectedFavorit selected = {selected} dialogOpen = {dialogOpen} />}\r\n        </main>\r\n\r\n    )\r\n}\r\n    \r\nconst GET_SINGLE_ARTIST = gql` \r\n    query SingleArtist($slug: String!) { \r\n        artist(where: {slug: $slug}){ \r\n            id\r\n            name\r\n            slug\r\n            artistImage {\r\n                url\r\n            }\r\n            albums {\r\n                ...on Album {\r\n                  id\r\n                  slug\r\n                  albumName\r\n                  albumImage {\r\n                    url\r\n                  }\r\n                  songs {\r\n                    id\r\n                    slug\r\n                    songTitle\r\n                    songFile {\r\n                        url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            songs {\r\n                ...on Song {\r\n                    id\r\n                    slug\r\n                    songTitle\r\n                    songFile {\r\n                        url\r\n                    }\r\n                }\r\n            }\r\n        }   \r\n    } \r\n`; ","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js",["70","71","72","73","74"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        paddingLeft: \"90px\",\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar\r\n    },\r\n    grid: {\r\n        padding: '50px',\r\n        marginLeft: '200px',\r\n        marginRight: '200px'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        paddingTop: '0px',\r\n        paddingBottom: '25px',\r\n        boxShadow: \"0px 1px 6px 0px rgba(0,0,0,0.7)\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            boxShadow: \"none\",\r\n        },\r\n    },\r\n    listItemHeader: {\r\n        background: \"rgb(230, 230, 230)\",\r\n        color: \"rgb(128, 128, 128)\",\r\n        padding: \"4px 12px\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            paddingLeft: \"340px\",\r\n        },\r\n    },\r\n    listItemHeaderText: {\r\n        transition: \"all 0.3s linear\",\r\n        maxWidth: \"40ch\",\r\n        //textAlign: 'center',\r\n        paddingLeft: '60px',\r\n        color: 'black'\r\n    },\r\n  }));\r\n\r\nexport default function ArtistList({results, open}) {\r\n    const classes = useStyles();\r\n    \r\n        return (\r\n            <main>\r\n            <div className={classes.toolbar} />\r\n            <Grid container item xs={12} justify=\"center\">\r\n            <Grid container item xs={12} spacing={6} className = {classes.grid} >\r\n            <Grid container item xs = {12} style = {{margin: '25px'}}>\r\n            <Grid item xs = {12} lg>\r\n            <List dense className = {classes.root}>\r\n                <ListItem dense className = {classes.listItemHeader}>\r\n                    <ListItemText className = {classes.listItemHeaderText} \r\n                        primary = 'Artist List'/> \r\n                </ListItem>\r\n                {results.map((artist, id)  => {\r\n                    const labelId = `checkbox-list-secondary-label-${artist.name}`;\r\n                    return (\r\n                        <ListItem key = {id} button component = {Link} to ={`/artist/${artist.slug}`} style = {{marginTop: '25px', marginBottom: '25px', paddingLeft: '60px' }}>\r\n                            <ListItemAvatar>\r\n                                <Avatar \r\n                                    alt={artist + 1}\r\n                                    src={artist.artistImage.url}\r\n                                  />\r\n                            </ListItemAvatar>\r\n                            <ListItemText id = {labelId} primary = {artist.name}/>\r\n                        </ListItem>\r\n                    )\r\n                })}\r\n            </List>\r\n            </Grid>\r\n            </Grid>\r\n            </Grid>\r\n            </Grid>\r\n            </main>\r\n        );\r\n}\r\n\r\n","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Header.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\AppDrawer.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Appbar.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\index.js",["75"],"import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport DialogFavorit from './Dialog';\r\n\r\nconst SelectedFavorit =({selected, dialogOpen}) => {\r\n  console.log(selected);\r\n    const {loading, error, data} = useQuery(\r\n        GET_CHOOSEN_DATA, {\r\n            variables: {id: selected}\r\n        }\r\n    );\r\n\r\n\r\n    if(loading)\r\n        return <p>Loading artist...</p>\r\n    if(error)\r\n        return <p>Error...</p>\r\n    if(data !== null) {\r\n        console.log(data);\r\n    }\r\n    \r\n    return(\r\n      <div></div>\r\n        //<DialogFavorit selected = {selected} dialogOpen = {dialogOpen} />\r\n        )\r\n}\r\n\r\nexport default SelectedFavorit;\r\n\r\nconst GET_CHOOSEN_DATA =  gql`\r\nquery GetChoosenData($id : ID!) {\r\n    artists(where: {id: $id} ){\r\n        ...on Artist {\r\n          id\r\n          slug\r\n          name\r\n          artistImage {\r\n            url\r\n          }\r\n        }\r\n    }\r\n    albums(where: {id: $id} ) {\r\n      ...on Album {\r\n        id\r\n        slug\r\n        albumName\r\n        albumImage {\r\n          url\r\n        }\r\n      }\r\n    }\r\n    songs(where: {id: $id} ) {\r\n      ...on Song {\r\n        id\r\n        slug\r\n        songTitle\r\n        songFile {\r\n          url\r\n        }\r\n      }\r\n    }\r\n}\r\n`;\r\n\r\n","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\Dialog.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchPage.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchData.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":2,"column":21,"nodeType":"82","messageId":"83","endLine":2,"endColumn":25},{"ruleId":"80","severity":1,"message":"84","line":6,"column":92,"nodeType":"82","messageId":"83","endLine":6,"endColumn":99},{"ruleId":"80","severity":1,"message":"85","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"86","line":5,"column":64,"nodeType":"82","messageId":"83","endLine":5,"endColumn":72},{"ruleId":"80","severity":1,"message":"87","line":5,"column":74,"nodeType":"82","messageId":"83","endLine":5,"endColumn":90},{"ruleId":"80","severity":1,"message":"88","line":6,"column":10,"nodeType":"82","messageId":"83","endLine":6,"endColumn":18},{"ruleId":"80","severity":1,"message":"89","line":6,"column":20,"nodeType":"82","messageId":"83","endLine":6,"endColumn":34},{"ruleId":"80","severity":1,"message":"90","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":21},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'useState' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'Favorite' is defined but never used.","'FavoriteBorder' is defined but never used.","'DialogFavorit' is defined but never used.","no-global-assign","no-unsafe-negation"]