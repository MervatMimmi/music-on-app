[{"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js":"1","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js":"2","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js":"3","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js":"4","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js":"5","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js":"6","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js":"7","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Search.js":"8"},{"size":797,"mtime":1609589845393,"results":"9","hashOfConfig":"10"},{"size":1052,"mtime":1609619776192,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1310,"mtime":1609625727453,"results":"13","hashOfConfig":"10"},{"size":4970,"mtime":1609631102855,"results":"14","hashOfConfig":"10"},{"size":4405,"mtime":1609670843322,"results":"15","hashOfConfig":"10"},{"size":3954,"mtime":1609594573966,"results":"16","hashOfConfig":"10"},{"size":1338,"mtime":1609618910415,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"d00893",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js",[],["38","39"],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js",["40","41","42"],"import React, { useState, Fragment } from 'react';\r\nimport clsx from 'clsx';\r\nimport { Router, Route, Link, NavLink } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport { fade, withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Search from './Search';\r\nimport Home from \"../Home\";\r\n\r\nconst drawerWidth = 240;\r\nconst history = createBrowserHistory();\r\n\r\nconst styles = theme => ({\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  flex: {\r\n    flex: 1\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    width: drawerWidth\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20\r\n  },\r\n  toolbarMargin: theme.mixins.toolbar,\r\n  aboveDrawer: {\r\n    zIndex: theme.zIndex.drawer + 1\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '30ch',\r\n    },\r\n  },\r\n});\r\n\r\nconst MyToolbar = withStyles(styles)(\r\n  ({ classes, title, onMenuClick }) => (\r\n    <Fragment>\r\n      <AppBar className={classes.aboveDrawer}>\r\n        <Toolbar>\r\n          <IconButton\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"Menu\"\r\n            onClick={onMenuClick}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            className={classes.flex}\r\n          >\r\n            {title}\r\n          </Typography>\r\n          <Search />\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Searchâ€¦\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              \r\n            />\r\n          </div>\r\n          <div className={classes.grow} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.toolbarMargin} />\r\n    </Fragment>\r\n  )\r\n);\r\n\r\nconst MyDrawer = withStyles(styles)(\r\n  ({ classes, variant, open, onClose, onItemClick }) => (\r\n    <Router history={history}>\r\n    <Drawer variant={variant} open={open} onClose={onClose}\r\n                classes={{\r\n                  paper: classes.drawerPaper\r\n                }}\r\n    >\r\n      <div\r\n        className={clsx({\r\n          [classes.toolbarMargin]: variant === 'persistent'\r\n        })}\r\n      />\r\n      <List>\r\n        <ListItem button component={Link} to=\"/\" onClick={onItemClick('Home')}>\r\n          <HomeIcon /> \r\n          <ListItemText>Home</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </Drawer>\r\n   {/* <main className={classes.content}>\r\n        <Route exact path=\"/\" component={Home} />\r\n    </main>*/}\r\n    </Router>\r\n  )\r\n);\r\n\r\nfunction Appbar({ classes, variant }) {\r\n  const [drawer, setDrawer] = useState(false);\r\n  const [title, setTitle] = useState('Home');\r\n\r\n  const toggleDrawer = () => {\r\n    setDrawer(!drawer);\r\n  };\r\n\r\n  const onItemClick = title => () => {\r\n    setTitle(title);\r\n    setDrawer(variant === 'temporary' ? false : drawer);\r\n    setDrawer(!drawer);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <MyToolbar title={title} onMenuClick={toggleDrawer} />\r\n      <MyDrawer\r\n        open={drawer}\r\n        onClose={toggleDrawer}\r\n        onItemClick={onItemClick}\r\n        variant={variant}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(Appbar);","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js",["43","44","45","46","47","48","49"],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js",["50","51"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//import { graphql } from 'react-apollo';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        paddingLeft: \"90px\",\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar\r\n    },\r\n    grid: {\r\n        padding: '25px',\r\n        marginLeft: '200px',\r\n        marginRight: '200px'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        boxShadow: \"0px 1px 6px 0px rgba(0,0,0,0.7)\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            boxShadow: \"none\",\r\n        },\r\n    },\r\n    listItemHeader: {\r\n        background: \"rgb(230, 230, 230)\",\r\n        color: \"rgb(128, 128, 128)\",\r\n        padding: \"4px 12px\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            paddingLeft: \"340px\",\r\n        },\r\n    },\r\n    listItemHeaderText: {\r\n        transition: \"all 0.3s linear\",\r\n        maxWidth: \"40ch\",\r\n        textAlign: 'center',   \r\n    },\r\n  }));\r\n\r\nexport default function ArtistList({results, open}) {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState([1]);\r\n\r\n\r\n        const handleToggle = (value) => () => {\r\n            const currentIndex = checked.indexOf(value);\r\n            const newChecked = [...checked];\r\n    \r\n            if(currentIndex === -1) {\r\n                newChecked.push(value);\r\n            } else  {\r\n                newChecked.splice(currentIndex, 1);\r\n            }\r\n            setChecked(newChecked);\r\n        };\r\n    \r\n        return (\r\n            <main>\r\n            <div className={classes.toolbar} />\r\n            <Grid container item xs={12} justify=\"center\">\r\n            <Grid container item xs={12} spacing={6} className = {classes.grid} >\r\n            <Grid container item xs = {12} >\r\n            <Grid item xs = {12} lg>\r\n            <List dense className = {classes.root}>\r\n                <ListItem dense className = {classes.listItemHeader}>\r\n                    <ListItemText className = {classes.listItemHeaderText} \r\n                        primary = 'Artist List'/> \r\n                </ListItem>\r\n                {results.map((artist, id)  => {\r\n                    const labelId = `checkbox-list-secondary-label-${artist.name}`;\r\n                    return (\r\n                        <ListItem key = {id} button component = {Link} to ={`/artist/${artist.slug}`}>\r\n                            <FormControlLabel\r\n                                control = {\r\n                                    <Checkbox icon = {<FavoriteBorder />} \r\n                                            checkedIcon ={<Favorite />} \r\n                                            name = 'checkedH' />}\r\n                                            edge = 'start'\r\n                                            onChange = {handleToggle(artist)}\r\n                                            checked = {checked.indexOf(artist) !== -1}\r\n                            />\r\n                            <ListItemAvatar>\r\n                                <Avatar \r\n                                    alt={artist + 1}\r\n                                    src={artist.artistImage.url}\r\n                                  />\r\n                            </ListItemAvatar>\r\n                            <ListItemText id = {labelId} primary = {artist.name}/>\r\n                        </ListItem>\r\n                    )\r\n                })}\r\n            </List>\r\n            </Grid>\r\n            </Grid>\r\n            </Grid>\r\n            </Grid>\r\n            </main>\r\n        );\r\n}\r\n\r\n","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Search.js",["52"],"import React, { useEffect, useState } from 'react';\r\nimport { useLazyQuery, gql} from '@apollo/client';\r\n\r\n\r\nconst SEARCH_DATA = gql`\r\nquery findDataBySlug($slug: String!) {\r\n    findData(slug: $slug) {\r\n        id\r\n        slug\r\n        name\r\n        artistImage {\r\n          url\r\n        }\r\n         albumsSongs {\r\n              ...on Album {\r\n                id\r\n                slug\r\n                albumName\r\n                albumImage {\r\n                  url\r\n                }\r\n                songs {\r\n                  id\r\n                  slug\r\n                  songTitle\r\n                }\r\n              }\r\n              ...on Song {\r\n                id\r\n                slug\r\n                songTitle\r\n                songFile {\r\n                  url\r\n                }\r\n              }\r\n            }\r\n      }\r\n}\r\n`;\r\n \r\nconst Search = ({slugs}) => {\r\n    const [getData, result] = useLazyQuery(SEARCH_DATA)\r\n    const[data, setData] = useState(null);\r\n\r\n    const showSlug =(slug) => {\r\n        getData({ variables: {slug: slug} })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(result.data) {\r\n            setData(result.data.findData)\r\n        }\r\n    }, [result])\r\n\r\n    if(data) {\r\n        console.log(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          \r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\nexport default Search;",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":3,"column":18,"nodeType":"59","messageId":"60","endLine":3,"endColumn":23},{"ruleId":"57","severity":1,"message":"61","line":3,"column":31,"nodeType":"59","messageId":"60","endLine":3,"endColumn":38},{"ruleId":"57","severity":1,"message":"62","line":20,"column":8,"nodeType":"59","messageId":"60","endLine":20,"endColumn":12},{"ruleId":"57","severity":1,"message":"63","line":2,"column":21,"nodeType":"59","messageId":"60","endLine":2,"endColumn":25},{"ruleId":"57","severity":1,"message":"64","line":6,"column":26,"nodeType":"59","messageId":"60","endLine":6,"endColumn":40},{"ruleId":"57","severity":1,"message":"65","line":6,"column":64,"nodeType":"59","messageId":"60","endLine":6,"endColumn":72},{"ruleId":"57","severity":1,"message":"66","line":6,"column":74,"nodeType":"59","messageId":"60","endLine":6,"endColumn":90},{"ruleId":"57","severity":1,"message":"67","line":7,"column":10,"nodeType":"59","messageId":"60","endLine":7,"endColumn":18},{"ruleId":"57","severity":1,"message":"68","line":7,"column":20,"nodeType":"59","messageId":"60","endLine":7,"endColumn":34},{"ruleId":"57","severity":1,"message":"69","line":73,"column":15,"nodeType":"59","messageId":"60","endLine":73,"endColumn":27},{"ruleId":"57","severity":1,"message":"70","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":18},{"ruleId":"57","severity":1,"message":"71","line":4,"column":20,"nodeType":"59","messageId":"60","endLine":4,"endColumn":23},{"ruleId":"57","severity":1,"message":"72","line":45,"column":11,"nodeType":"59","messageId":"60","endLine":45,"endColumn":19},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'NavLink' is defined but never used.","'Home' is defined but never used.","'Link' is defined but never used.","'ListItemAvatar' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'Favorite' is defined but never used.","'FavoriteBorder' is defined but never used.","'handleToggle' is assigned a value but never used.","'useQuery' is defined but never used.","'gql' is defined but never used.","'showSlug' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]