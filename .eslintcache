[{"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js":"1","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js":"2","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js":"3","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js":"4","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js":"5","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js":"6","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js":"7","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Header.js":"8","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\AppDrawer.js":"9","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Appbar.js":"10","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\index.js":"11","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\Dialog.js":"12","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\index.js":"13","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchPage.js":"14","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchData.js":"15","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\index.js":"16","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\SingleArtist.js":"17","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\SingleAlbum.js":"18","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\index.js":"19","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\SingleSong.js":"20"},{"size":799,"mtime":1609789447690,"results":"21","hashOfConfig":"22"},{"size":1481,"mtime":1610103764682,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":1438,"mtime":1610097682794,"results":"25","hashOfConfig":"22"},{"size":464,"mtime":1609928810928,"results":"26","hashOfConfig":"22"},{"size":2605,"mtime":1610103042077,"results":"27","hashOfConfig":"22"},{"size":3107,"mtime":1610096150616,"results":"28","hashOfConfig":"22"},{"size":981,"mtime":1609837827115,"results":"29","hashOfConfig":"22"},{"size":4733,"mtime":1610105664703,"results":"30","hashOfConfig":"22"},{"size":1321,"mtime":1609940340853,"results":"31","hashOfConfig":"22"},{"size":1240,"mtime":1609933769805,"results":"32","hashOfConfig":"22"},{"size":373,"mtime":1609931258932,"results":"33","hashOfConfig":"22"},{"size":638,"mtime":1610022113488,"results":"34","hashOfConfig":"22"},{"size":205,"mtime":1610027042268,"results":"35","hashOfConfig":"22"},{"size":4386,"mtime":1610108675200,"results":"36","hashOfConfig":"22"},{"size":2062,"mtime":1610103112453,"results":"37","hashOfConfig":"22"},{"size":10784,"mtime":1610099417940,"results":"38","hashOfConfig":"22"},{"size":6125,"mtime":1610103684662,"results":"39","hashOfConfig":"22"},{"size":2230,"mtime":1610103911944,"results":"40","hashOfConfig":"22"},{"size":4981,"mtime":1610103452855,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"d00893",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\index.js",[],["89","90"],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\App.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\reportWebVitals.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\index.js",["91"],"import React, {useState, useEffect} from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport SingleArtist from './SingleArtist';\r\n\r\n\r\n  \r\nexport default function Artist() {\r\n    const [results, setResults] = useState([]);\r\n    const [selected, setSelected] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const {slug} = useParams();\r\n    const { loading, error, data} = useQuery(\r\n        GET_SINGLE_ARTIST, {\r\n            variables: {slug: slug}\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const handleSelected =(e, key) => {\r\n        //console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        //console.log( typeof tempSelect);\r\n        setSelected(tempSelect);\r\n        setDialogOpen(true);  \r\n    }\r\n\r\n    const getData = () => {\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data) {\r\n            return setResults(data);\r\n          \r\n        }\r\n    }\r\n\r\n    console.log(results);\r\n    \r\n     /*   const handleToggle = (e) => () => {\r\n            console.log(e.target.value);\r\n            setChecked(e.target.value);\r\n            \r\n        };*/\r\n    \r\n    return (\r\n        <div>\r\n            {loading || results.length === 0 ? \r\n                <h1>Loading Artist...</h1> \r\n              :  <SingleArtist \r\n                results = {results} \r\n                selected = {selected}\r\n                dialogOpen ={dialogOpen} \r\n                handleSelected = {handleSelected}/>\r\n            }\r\n        </div>\r\n       \r\n    )\r\n}\r\n    \r\nconst GET_SINGLE_ARTIST = gql` \r\n    query SingleArtist($slug: String!) { \r\n        artist(where: {slug: $slug}){ \r\n            id\r\n            name\r\n            slug\r\n            artistImage {\r\n                url\r\n            }\r\n            albums {\r\n                ...on Album {\r\n                  id\r\n                  slug\r\n                  albumName\r\n                  albumImage {\r\n                    url\r\n                  }\r\n                  songs {\r\n                    id\r\n                    slug\r\n                    songTitle\r\n                    songFile {\r\n                        url\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            songs {\r\n                ...on Song {\r\n                    id\r\n                    slug\r\n                    songTitle\r\n                    songFile {\r\n                        url\r\n                    }\r\n                }\r\n            }\r\n        }   \r\n    } \r\n`; ","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Home\\ArtistList.js",["92","93","94","95","96"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        paddingLeft: \"90px\",\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar\r\n    },\r\n    grid: {\r\n        padding: '50px',\r\n        marginLeft: '200px',\r\n        marginRight: '200px'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        paddingTop: '0px',\r\n        paddingBottom: '25px',\r\n        boxShadow: \"0px 1px 6px 0px rgba(0,0,0,0.7)\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            boxShadow: \"none\",\r\n        },\r\n    },\r\n    listItemHeader: {\r\n        background: \"rgb(230, 230, 230)\",\r\n        color: \"rgb(128, 128, 128)\",\r\n        padding: \"4px 12px\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            paddingLeft: \"340px\",\r\n        },\r\n    },\r\n    listItemHeaderText: {\r\n        transition: \"all 0.3s linear\",\r\n        maxWidth: \"40ch\",\r\n        //textAlign: 'center',\r\n        paddingLeft: '60px',\r\n        color: 'black'\r\n    },\r\n  }));\r\n\r\nexport default function ArtistList({results, open}) {\r\n    const classes = useStyles();\r\n    console.log(results);\r\n    \r\n        return (\r\n            <main>\r\n          <div className={classes.toolbar} />\r\n            <Grid container item xs={12} justify=\"center\">\r\n            <Grid container item xs={12} spacing={6} className = {classes.grid} >\r\n            <Grid container item xs = {12} style = {{margin: '25px'}}>\r\n            <Grid item xs = {12} lg>\r\n            <List dense className = {classes.root}>\r\n                <ListItem dense className = {classes.listItemHeader}>\r\n                    <ListItemText className = {classes.listItemHeaderText} \r\n                        primary = 'Artist List'/> \r\n                </ListItem>\r\n                {results.artists.map((artist, id)  => {\r\n                    const labelId = `checkbox-list-secondary-label-${artist.name}`;\r\n                    return (\r\n                        <ListItem key = {id} button component = {Link} to ={`/artist/${artist.slug}`} style = {{marginTop: '25px', marginBottom: '25px', paddingLeft: '60px' }}>\r\n                            <ListItemAvatar>\r\n                                <Avatar \r\n                                    alt={artist + 1}\r\n                                    src={artist.artistImage.url}\r\n                                  />\r\n                            </ListItemAvatar>\r\n                            <ListItemText id = {labelId} primary = {artist.name}/>\r\n                        </ListItem>\r\n                    )\r\n                })}\r\n            </List>\r\n            </Grid>\r\n            </Grid>\r\n            </Grid>\r\n            </Grid>\r\n            </main>\r\n        );\r\n}\r\n\r\n","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Header.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\AppDrawer.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Appbar\\Appbar.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\index.js",["97"],"import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport DialogFavorit from './Dialog';\r\n\r\nconst SelectedFavorit =({selected, dialogOpen}) => {\r\n  console.log(selected);\r\n    const {loading, error, data} = useQuery(\r\n        GET_CHOOSEN_DATA, {\r\n            variables: {id: selected}\r\n        }\r\n    );\r\n\r\n\r\n    if(loading)\r\n        return <p>Loading artist...</p>\r\n    if(error)\r\n        return <p>Error...</p>\r\n    if(data !== null) {\r\n        console.log(data);\r\n    }\r\n    \r\n    return(\r\n      <div></div>\r\n        //<DialogFavorit selected = {selected} dialogOpen = {dialogOpen} />\r\n        )\r\n}\r\n\r\nexport default SelectedFavorit;\r\n\r\nconst GET_CHOOSEN_DATA =  gql`\r\nquery GetChoosenData($id : ID!) {\r\n    artists(where: {id: $id} ){\r\n        ...on Artist {\r\n          id\r\n          slug\r\n          name\r\n          artistImage {\r\n            url\r\n          }\r\n        }\r\n    }\r\n    albums(where: {id: $id} ) {\r\n      ...on Album {\r\n        id\r\n        slug\r\n        albumName\r\n        albumImage {\r\n          url\r\n        }\r\n      }\r\n    }\r\n    songs(where: {id: $id} ) {\r\n      ...on Song {\r\n        id\r\n        slug\r\n        songTitle\r\n        songFile {\r\n          url\r\n        }\r\n      }\r\n    }\r\n}\r\n`;\r\n\r\n","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Favorits\\Dialog.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\index.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchPage.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Search\\SearchData.js",["98","99","100","101","102","103"],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\index.js",["104"],"import React, {useState, useEffect} from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport SingleAlbum from './SingleAlbum';\r\n\r\n\r\n  \r\nexport default function Album() {\r\n    const [results, setResults] = useState([]);\r\n    const [selected, setSelected] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const {slug} = useParams();\r\n    const { loading, error, data} = useQuery(\r\n        GET_SINGLE_ALBUM, {\r\n            variables: {slug: slug}\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const handleSelected =(e, key) => {\r\n        //console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        //console.log( typeof tempSelect);\r\n        setSelected(tempSelect);\r\n        setDialogOpen(true);  \r\n    }\r\n\r\n    const getData = () => {\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data) {\r\n            return setResults(data);\r\n          \r\n        }\r\n    }\r\n\r\n    console.log(results);\r\n    \r\n    \r\n     /*   const handleToggle = (e) => () => {\r\n            console.log(e.target.value);\r\n            setChecked(e.target.value);\r\n            \r\n        };*/\r\n    \r\n    return (\r\n        <div>\r\n            {loading || results.length === 0 ? \r\n                <h1>Loading Album...</h1> \r\n              :  <SingleAlbum \r\n                results = {results} \r\n                selected = {selected}\r\n                dialogOpen ={dialogOpen} \r\n                handleSelected = {handleSelected}/>\r\n            }\r\n        </div>\r\n       \r\n    )\r\n}\r\n    \r\n\r\nconst GET_SINGLE_ALBUM = gql`\r\nquery SingleAlbum($slug: String!) {\r\n    album(where: {slug: $slug}) {\r\n        id\r\n        slug\r\n        albumName\r\n        albumImage {\r\n          url\r\n        }\r\n        songs {\r\n            ...on Song {\r\n                id\r\n                slug\r\n                songTitle\r\n                songFile {\r\n                  url\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Artist\\SingleArtist.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Album\\SingleAlbum.js",[],"C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\index.js",["105"],"import React, {useState, useEffect} from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport SingleSong from './SingleSong';\r\n\r\n\r\n  \r\nexport default function Song() {\r\n    const [results, setResults] = useState([]);\r\n    const [selected, setSelected] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const {slug} = useParams();\r\n    const { loading, error, data} = useQuery(\r\n        GET_SINGLE_SONG, {\r\n            variables: {slug: slug}\r\n        }\r\n    );\r\n\r\n    const handleSelected =(e, key) => {\r\n        //console.log(key);\r\n        let tempSelect = {...selected};\r\n        tempSelect = e.target.value;\r\n        //console.log( typeof tempSelect);\r\n        setSelected(tempSelect);\r\n        setDialogOpen(true);  \r\n    }\r\n    useEffect(() => {\r\n        getData();\r\n    })\r\n\r\n    const getData = () => {\r\n        if(error)\r\n            return <p>Error...</p>\r\n        if(data) {\r\n            return setResults(data);\r\n          \r\n        }\r\n    }\r\n    \r\n     /*   const handleToggle = (e) => () => {\r\n            console.log(e.target.value);\r\n            setChecked(e.target.value);\r\n            \r\n        };*/\r\n    \r\n    return (\r\n        <div>\r\n            {loading || results.length === 0 ? \r\n                <h1>Loading Song...</h1> \r\n              :  <SingleSong \r\n                results = {results} \r\n                selected = {selected}\r\n                dialogOpen ={dialogOpen} \r\n                handleSelected = {handleSelected}/>\r\n            }\r\n        </div>\r\n       \r\n    )\r\n}\r\n    \r\n\r\n\r\nconst GET_SINGLE_SONG = gql`\r\nquery GetSong($slug: String!) {\r\n    song(where: {slug: $slug}) {\r\n        id\r\n        slug\r\n        songTitle\r\n        songFile {\r\n          url\r\n        }\r\n        artists {\r\n            ...on Artist {\r\n                id\r\n                slug\r\n                name\r\n                artistImage {\r\n                    url\r\n                }\r\n            }\r\n        }\r\n        album {\r\n            ...on Album {\r\n                id\r\n                slug\r\n                albumName\r\n                albumImage {\r\n                    url\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;","C:\\Users\\merva\\Documents\\EC\\Webbutveckling i CMS\\music-on-app\\src\\components\\Song\\SingleSong.js",["106"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Checkbox, FormControlLabel} from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\nimport logo from '../../Image/logo.jpg';\r\nimport SelectedFavorit from '../Favorits';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        paddingLeft: \"90px\",\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar\r\n    },\r\n    grid: {\r\n        padding: '75px',\r\n        marginLeft: '200px',\r\n        marginRight: '200px'\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        paddingTop: '0px',\r\n        paddingBottom: '25px',\r\n        boxShadow: \"0px 1px 6px 0px rgba(0,0,0,0.7)\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            boxShadow: \"none\",\r\n        },\r\n    },\r\n    listItemHeader: {\r\n        background: \"rgb(230, 230, 230)\",\r\n        color: \"rgb(128, 128, 128)\",\r\n        padding: \"8px 12px\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            paddingLeft: \"340px\",\r\n        },\r\n    },\r\n    listItemHeaderText: {\r\n        transition: \"all 0.3s linear\",\r\n        maxWidth: \"40ch\",\r\n        textAlign: 'center',  \r\n        color: 'black', \r\n    },\r\n    large: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n    },\r\n    \r\n  }));\r\n\r\nexport default function SingleAlbum({results, selected,dialogOpen, handleSelected}) {\r\n    const classes = useStyles();\r\n    console.log(results);\r\n\r\n    return (\r\n        <main >\r\n            <div className={classes.toolbar} />\r\n            <Grid container item xs={12} justify=\"center\">\r\n                <Grid container item xs={12} spacing={6} className = {classes.grid} >\r\n                    <Grid container item xs = {12} >\r\n                        <Grid item xs = {12} lg>\r\n                            <List dense className = {classes.root}>\r\n                                <ListItem dense className = {classes.listItemHeader}>\r\n                                        <ListItemText className = {classes.listItemHeaderText} \r\n                                            primary = {results.song.SongTitle}\r\n                                            /> \r\n                                    </ListItem>\r\n                                    <ListItem className = {classes.albumTitle}>\r\n                                                            <FormControlLabel\r\n                                                                control = {\r\n                                                                <Checkbox icon = {<FavoriteBorder />}\r\n                                                                    checkedIcon = {<Favorite />}\r\n                                                                    name = 'checked'/>}\r\n                                                                    edge = 'start'\r\n                                                                    value = {results.song.id}\r\n                                                                    onChange = {handleSelected}\r\n                                                                    />\r\n                                                            <ListItemAvatar>\r\n                                                                <Avatar \r\n                                                                    alt = {results.song + 1}\r\n                                                                    src = {logo}\r\n                                                                    />\r\n                                                            </ListItemAvatar>\r\n                                                            <ListItemText\r\n                                                                className = {classes.listItemHeaderText} \r\n                                                                primary = {results.song.songTitle}\r\n                                                                />\r\n                                                            {results.song.songFile ? \r\n                                                                <audio controls>\r\n                                                                <source src = {results.song.songFile.url}\r\n                                                                        type = 'audio/mpeg' />\r\n                                                                </audio> : null }\r\n                                                        </ListItem>\r\n                                </List>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            {dialogOpen && <SelectedFavorit selected = {selected} dialogOpen = {dialogOpen} />}\r\n        </main>\r\n    )\r\n}",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":21,"nodeType":"113","messageId":"114","endLine":2,"endColumn":25},{"ruleId":"111","severity":1,"message":"115","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"116","line":5,"column":64,"nodeType":"113","messageId":"114","endLine":5,"endColumn":72},{"ruleId":"111","severity":1,"message":"117","line":5,"column":74,"nodeType":"113","messageId":"114","endLine":5,"endColumn":90},{"ruleId":"111","severity":1,"message":"118","line":6,"column":10,"nodeType":"113","messageId":"114","endLine":6,"endColumn":18},{"ruleId":"111","severity":1,"message":"119","line":6,"column":20,"nodeType":"113","messageId":"114","endLine":6,"endColumn":34},{"ruleId":"111","severity":1,"message":"120","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":21},{"ruleId":"111","severity":1,"message":"121","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"122","line":7,"column":8,"nodeType":"113","messageId":"114","endLine":7,"endColumn":18},{"ruleId":"111","severity":1,"message":"123","line":53,"column":12,"nodeType":"113","messageId":"114","endLine":53,"endColumn":22},{"ruleId":"111","severity":1,"message":"124","line":54,"column":12,"nodeType":"113","messageId":"114","endLine":54,"endColumn":20},{"ruleId":"111","severity":1,"message":"125","line":54,"column":22,"nodeType":"113","messageId":"114","endLine":54,"endColumn":33},{"ruleId":"126","severity":1,"message":"127","line":70,"column":8,"nodeType":"128","endLine":70,"endColumn":14,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":21,"nodeType":"113","messageId":"114","endLine":2,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":2,"column":21,"nodeType":"113","messageId":"114","endLine":2,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":14},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'Favorite' is defined but never used.","'FavoriteBorder' is defined but never used.","'DialogFavorit' is defined but never used.","'Form' is defined but never used.","'SearchPage' is defined but never used.","'searchData' is assigned a value but never used.","'redirect' is assigned a value but never used.","'setRedirect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.","ArrayExpression",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},"Update the dependencies array to be: [data, error]",{"range":"135","text":"136"},[2102,2108],"[data, error]"]